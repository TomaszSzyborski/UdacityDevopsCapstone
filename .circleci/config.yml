version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name rest-learning-backend-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  scan-backend:
    docker:
    - image: python:3.9-alpine
    steps:
      - checkout
      - run:
          name: Install flake8 and pylama for code quality scan
          working_directory: ./app/rest_introduction_app
          command: pip install flake8 pylama
      - run:
          name: Run flake8 scan
          working_directory: ./app/
          command: flake8 --statistics
      - run:
          name: Run pylama scan
          working_directory: ./app/
          command: pylama

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template .circleci/files/backend.yml \
            --tags project=rest-learning-backend \
            --stack-name "rest-learning-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=rest-learning-backend" \
            --output text)
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: 759b077a-c7a9-401c-a42d-d7fb6a530020" \
            --request PUT \
            --data $BACKEND_IP \
            https://api.memstash.io/values/backend_ip
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip ansible curl
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["d3:0d:11:52:96:93:38:ed:84:70:40:c3:5b:ab:0f:6d:a9:05:9a:05"]
      - run:
          name: Set up inventory file
          command: |
            cd .circleci/ansible
            echo "[web]" >> inventory.txt
            URLS=$(curl -H "token: 759b077a-c7a9-401c-a42d-d7fb6a530020" --request GET https://api.memstash.io/values/backend_ip)
            echo "$URLS" >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server with ansible
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/.circleci/ansible/inventory.txt
      - destroy-environment

  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d3:0d:11:52:96:93:38:ed:84:70:40:c3:5b:ab:0f:6d:a9:05:9a:05"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip curl
            pip install awscli
      - run:
          name: install openssh
          command: |
            apk add openssh-client
      - attach_workspace:
          at: ~/
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/.circleci/ansible/inventory.txt
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            echo $(curl -H "token: 07ec3073-5a1c-4e57-af5e-87a6778e4e50" \
             --request GET https://api.memstash.io/values/backend_ip) >> ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml --ssh-common-args='-o StrictHostKeyChecking=no'
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.9-alpine3.13
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          no_output_timeout: 5m
          command: |
            BACKEND_URL=$(aws ec2 describe-instances \
                      --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --filters "Name=tag:project,Values=rest-learning-backend" \
                      --output text)
            URL="http://${BACKEND_URL}:8080/api/ok"
            echo $URL
            curl -s $URL
               if curl -s $URL
               then
               echo "Smoke test OK"
               return 0
               else
               echo "Smoke test failed"
               return 1
               fi
      - destroy-environment
#
#  cloudfront-update:
#    docker:
#      - image: python:3.7-alpine3.11
#    steps:
#      - checkout
#      - run:
#          name: Install dependencies
#          command: |
#            pip3 install awscli
#            apk add --update curl
#      - run:
#          name: Retrieve old stack workflow ID
#          command: |
#            aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --region eu-central-1 --no-paginate --output text >> ./.circleci/oldworkflowid.txt
#      - persist_to_workspace:
#          root: ~/
#          paths:
#            - project/.circleci/oldworkflowid.txt
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            pwd
#            aws cloudformation deploy \
#            --template-file .circleci/files/cloudfront.yml \
#            --stack-name production-distro \
#            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#            --tags project=rest-learning
#      - revert-migrations
#      - destroy-environment
#
#  production-cloudfront-update:
#    docker:
#      - image: python:3.7-alpine3.11
#    steps:
#      - checkout
#      - run:
#          name: Install dependencies
#          command: |
#            pip3 install awscli
#            apk add --update curl
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            pwd
#            aws cloudformation deploy \
#            --template-file .circleci/files/cloudfront.yml \
#            --stack-name production-distro \
#            --parameter-overrides WorkflowID="pfjinfph45ez95qmuc4x" \
#            --tags project=rest-learning
#      - revert-migrations
#      - destroy-environment
#
#
#  cleanup:
#    docker:
#      - image: amazon/aws-cli
#    steps:
#      - checkout
#      - run:
#          name: Install dependencies
#          command: |
#            yum -y install tar gzip
#      - attach_workspace:
#          at: ~/
#      - run:
#          name: Get old stack workflow id, list of stacks and remove old stacks and files
#          command: |
#            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
#            echo "${OldWorkflowID}"
#            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
#            echo "${STACKS}"
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]; then
#              aws cloudformation delete-stack --stack-name "rest-learning-backend-${OldWorkflowID}"
#              aws s3 rm "s3://rest-learning-${OldWorkflowID}" --recursive
#              aws cloudformation delete-stack --stack-name "rest-learning-frontend-${OldWorkflowID}"
#            fi

workflows:
  default:
    jobs:
      - scan-backend
      - deploy-infrastructure:
          requires: [scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-backend:
          requires: [configure-infrastructure]
      - smoke-test:
          requires: [deploy-backend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]